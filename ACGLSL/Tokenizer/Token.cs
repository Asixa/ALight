using System;
using System.Collections.Generic;
using System.Text;

namespace ACGLSL.Tokenizer
{
    public enum TT
    {
//        Keyword,
//        Int,
//        Float,
//        Double,
//        Uint,
//        Bool,
//        True,
//        False,
//        Identifer,
//        Sign,
//        Assign,
//        Semicolon,
//        LBraces,
//        RBraces,
//        SquareBracket,
//        Parenthesis,
//        Vec1,
//        Vec2,
//        Vec3,
//        Vec4,
//        Bvec1,
//        Bvec2,
//        Bev3,
//        Bvec4,
//        Ivec1,
//        Ivec2,
//        Ivec3,
//        Ivec4,
//        Uvec1,
//        Uvec2,
//        Uvec3,
//        Uvec4,
//        Dvec1,
//        Dvec2,
//        Dvec3,
//        Dvec4,
//        In,
//        Out,
//        Uniform,
//        For,
//        While,
//        Defined,
//        Preprocessor,
//        StorageQualifiers,
//        BasicType,
//        ComplexType,

        ATTRIBUTE,
        CONST,
        BOOL,
        FLOAT,
        INT,
        UINT,
        BREAK,
        CONTINUE,
        DO,
        ELSE,
        FOR,
        IF,
        DISCARD,
        RETURN,
        SWITCH,
        CASE,
        DEFAULT,
        BVEC2,
        BVEC3,
        BVEC4,
        IVEC2,
        IVEC3,
        IVEC4,
        UVEC2,
        UVEC3,
        UVEC4,
        VEC2,
        VEC3,
        VEC4,
        MAT2,
        MAT3,
        MAT4,
        CENTROID,
        IN,
        OUT,
        INOUT,
        UNIFORM,
        VARYING,
        NOPERSPECTIVE,
        FLAT,
        SMOOTH,
        LAYOUT,
        MAT2X2,
        MAT2X3,
        MAT2X4,
        MAT3X2,
        MAT3X3,
        MAT3X4,
        MAT4X2,
        MAT4X3,
        MAT4X4,
        SAMPLER1D,
        SAMPLER2D,
        SAMPLER3D,
        SAMPLERCUBE,
        SAMPLER1DSHADOW,
        SAMPLER2DSHADOW,
        SAMPLERCUBESHADOW,
        SAMPLER1DARRAY,
        SAMPLER2DARRAY,
        SAMPLER1DARRAYSHADOW,
        SAMPLER2DARRAYSHADOW,
        ISAMPLER1D,
        ISAMPLER2D,
        ISAMPLER3D,
        ISAMPLERCUBE,
        ISAMPLER1DARRAY,
        ISAMPLER2DARRAY,
        USAMPLER1D,
        USAMPLER2D,
        USAMPLER3D,
        USAMPLERCUBE,
        USAMPLER1DARRAY,
        USAMPLER2DARRAY,
        SAMPLER2DRECT,
        SAMPLER2DRECTSHADOW,
        ISAMPLER2DRECT,
        USAMPLER2DRECT,
        SAMPLERBUFFER,
        ISAMPLERBUFFER,
        USAMPLERBUFFER,
        SAMPLER2DMS,
        ISAMPLER2DMS,
        USAMPLER2DMS,
        SAMPLER2DMSARRAY,
        ISAMPLER2DMSARRAY,
        USAMPLER2DMSARRAY,
        STRUCT,
        VOID,
        WHILE,
        IDENTIFIER,
        TYPE_NAME,
        FLOATCONSTANT,
        INTCONSTANT,
        UINTCONSTANT,
        BOOLCONSTANT,
        FIELD_SELECTION,
        LEFT_OP,
        RIGHT_OP,
        INC_OP,
        DEC_OP,
        LE_OP,
        GE_OP,
        EQ_OP,
        NE_OP,
        AND_OP,
        OR_OP,
        XOR_OP,
        MUL_ASSIGN,
        DIV_ASSIGN,
        ADD_ASSIGN,
        MOD_ASSIGN,
        LEFT_ASSIGN,
        RIGHT_ASSIGN,
        AND_ASSIGN,
        XOR_ASSIGN,
        OR_ASSIGN,
        SUB_ASSIGN,
        LEFT_PAREN,
        RIGHT_PAREN,
        LEFT_BRACKET,
        RIGHT_BRACKET,
        LEFT_BRACE,
        RIGHT_BRACE,
        DOT,
        COMMA,
        COLON,
        EQUAL,
        SEMICOLON,
        BANG,
        DASH,
        TILDE,
        PLUS,
        STAR,
        SLASH,
        PERCENT,
        LEFT_ANGLE,
        RIGHT_ANGLE,
        VERTICAL_BAR,
        CARET,
        AMPERSAND,
        QUESTION,
        INVARIANT,
        HIGH_PRECISION,
        MEDIUM_PRECISION,
        LOW_PRECISION,
        PRECISION,
        //Mine
        PRE_PROCESSOR,UNEXPECTED,
        //Feature
        RESERVED
    }
    public class Token
    {
        public TT type;
        public string content;

        public int line,ch;

        public Token(TT token_type,string value="")
        {
            ch = Lexer.ch;
            line = Lexer.line;
            type = token_type;
            content = value;
        }

        public Token(string content)
        {
            ch = Lexer.ch;
            line = Lexer.line;
            this.content = content;
        }

        public override string ToString() => "<"+content +","+type+">";

        public static readonly Token 
            LeftSquareBracket = new Token(TT.LEFT_BRACKET, "["),
            RightSquareBracket = new Token(TT.RIGHT_BRACKET, "]"),
            And = new Token(TT.AND_OP, "&&"),
            BitAnd = new Token(TT.AMPERSAND, "&"),
            Or = new Token(TT.OR_OP, "||"),
            BitInOr = new Token(TT.VERTICAL_BAR, "|"),
            BitExOr = new Token(TT.CARET, "^"),
            Equal = new Token(TT.EQ_OP, "=="),
            Plus = new Token(TT.PLUS, "+"),
            Time = new Token(TT.STAR, "*"),
            Devide = new Token(TT.SLASH, "/"),
            Minus = new Token(TT.DASH, "-"),
            Molding = new Token(TT.PERCENT, "%"),
            Assign = new Token(TT.EQUAL, "="),
            PlusAssign = new Token(TT.ADD_ASSIGN, "+="),
            TimeAssign = new Token(TT.MUL_ASSIGN, "*="),
            DevideAssign = new Token(TT.DIV_ASSIGN, "/="),
            MinusAssign = new Token(TT.SUB_ASSIGN, "-="),
            MoldingAssign = new Token(TT.MOD_ASSIGN, "-="),
            NotEqual = new Token(TT.NE_OP, "!="),
            Not = new Token(TT.BANG, "!"),
            Less = new Token(TT.LEFT_ANGLE, "<"),
            LessEqual = new Token(TT.LE_OP, "<="),
            Greater = new Token(TT.RIGHT_ANGLE, ">"),
            GreaterEqual=new Token(TT.GE_OP,">="),
            Semicolon=new Token(TT.SEMICOLON,";"),
            Comma = new Token(TT.COMMA,","),
            LeftParentheses=new Token(TT.LEFT_PAREN,"("),
            RightParentheses=new Token(TT.RIGHT_PAREN,")"),
            LeftBraces=new Token(TT.LEFT_BRACE, "{"),
            RightBraces = new Token(TT.RIGHT_BRACE,"}"),
            Dot = new Token(TT.DOT,"."),
            Tilde = new Token(TT.TILDE,"~"),
            Colon = new Token(TT.COLON,":"),

            //Sub=new Token(TT.,":"),
            Preprocessor=new Token(TT.PRE_PROCESSOR,"#");
    }
}
